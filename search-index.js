var searchIndex = JSON.parse('{\
"validate":{"doc":"This crate was developed with the intent of helping you to …","t":[13,13,3,3,8,4,3,3,12,12,14,14,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,11,11,5,11,11,11,11,0,12,0,12,12,11,11,11,11,11,11,12,11,12,23,10,11,12,0,12,12,12,12,12,12,12,3,11,11,12,11,11,11,12,12,12,12,11,11,11,11,11,11,12,11,3,12,12,11,11,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,12,12,12,12,6,3,11,11,12,11,11,11,12,11,11,11,12,11],"n":["Err","Ok","ScatterValidator","SeriesValidator","Validate","ValidationResult","Validator","ValidatorWrapper","allowed_mean_bias_error","allowed_root_mean_squared_error","assert_close","assert_not_close","borrow","borrow","borrow_mut","borrow_mut","chart_title","chart_title","description","expected","expected","expected_legend","expected_legend","found","found","found_legend","found_legend","from","from","from_csv","into","into","new","push","scatter","target_file","time_series","title","title","try_from","try_from","try_into","try_into","type_id","type_id","units","unwrap","val","valid","validate","validate","validations","validator_wrapper","x_label","x_units","y_label","y_units","0","0","1","ScatterValidator","borrow","borrow_mut","chart_title","clone","clone_into","default","expected","expected_legend","found","found_legend","from","into","to_owned","try_from","try_into","type_id","units","validate","SeriesValidator","allowed_mean_bias_error","allowed_root_mean_squared_error","borrow","borrow_mut","chart_title","clone","clone_into","default","expected","expected_legend","found","found_legend","from","into","to_owned","try_from","try_into","type_id","validate","x_label","x_units","y_label","y_units","ValidationFn","ValidatorWrapper","borrow","borrow_mut","description","format_description","from","into","title","try_from","try_into","type_id","val","validate"],"q":["validate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","validate::ValidationResult","","","validate::scatter","","","","","","","","","","","","","","","","","","","validate::time_series","","","","","","","","","","","","","","","","","","","","","","","","validate::validator_wrapper","","","","","","","","","","","","",""],"d":["Returns an error; meaning that returns that it returns …","Returns a message to write on the report","Validates a time series based on Mean Bias Error and Root …","Validates a time series based on Mean Bias Error and Root …","The main trait of this crate. All validator modules need …","Implements a validation error, where <code>Ok</code> returns just the …","This structure holds a number of validations to be ran, …","A wrapper that contains an object that implements <code>Validate</code>","The maximum allowed Mean Bias Error","The maximum allowed Root Mean Squared Error","Asserts whether two numbers are close enough by comparing …","Asserts whether two numbers are close enough","","","","","the title of the chart","the title of the chart","A description","The time series containing the expected values","The time series containing the expected values","The name of the series caled <code>expected</code>","The name of the series caled <code>expected</code>","The time series containing the found values","The time series containing the found values","The name of the <code>found</code> time series","The name of the <code>found</code> time series","Returns the argument unchanged.","Returns the argument unchanged.","Reads a number of columns from a CSV, transforms them into …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>Validator</code> that will write a report on …","Adds a new validation to the <code>Validator</code>","A Validator that creates a scatter plot from two datasets, …","The file in which the report will be written","A Validator that plots two time series and calculates—if …","The title of the test","The title of this section","","","","","","","The units in the x and y axis of the chart (they are …","Panics if this <code>ValidationResult</code> is of type <code>Err</code>.","The Validator","An Attribute MAcro","Runs a validation procedure, returning an error message if …","Runs the validations, writes the report and fails the task …","The validations to run","A wrapper that contains an object that implements <code>Validate</code>","The label in the x axis of the chart","The units in the x axis of the chart","The label in the y axis of the chart","The units in the y axis of the chart","","","","Validates a time series based on Mean Bias Error and Root …","","","the title of the chart","","","","The time series containing the expected values","The name of the series caled <code>expected</code>","The time series containing the found values","The name of the <code>found</code> time series","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","The units in the x and y axis of the chart (they are …","","Validates a time series based on Mean Bias Error and Root …","The maximum allowed Mean Bias Error","The maximum allowed Root Mean Squared Error","","","the title of the chart","","","","The time series containing the expected values","The name of the series caled <code>expected</code>","The time series containing the found values","The name of the <code>found</code> time series","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","The label in the x axis of the chart","The units in the x axis of the chart","The label in the y axis of the chart","The units in the y axis of the chart","","A wrapper that contains an object that implements <code>Validate</code>","","","A description","Format the description of a Validator","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The title of the test","","","","The Validator","Validates a Wrapper"],"i":[1,1,0,0,0,0,0,0,2,2,0,0,1,3,1,3,2,4,5,2,4,2,4,2,4,2,4,1,3,0,1,3,3,3,0,3,0,5,3,1,3,1,3,1,3,4,1,5,0,6,3,3,0,2,2,2,2,7,8,7,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,5,5,5,5,5,5,5,5,5,5,5,5],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["str",0]],["vec",3,[["vec",3,[["f64",0]]]]]],[[]],[[]],[[["str",0],["str",0]]],[[["",0],["box",3,[["validate",8]]]]],null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0]]],null,null,[[["",0]],["validationresult",4]],[[["",0]],["result",4,[["string",3]]]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["scattervalidator",3]],[[["",0],["",0]]],[[],["scattervalidator",3]],null,null,null,null,[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["validationresult",4]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["seriesvalidator",3]],[[["",0],["",0]]],[[],["seriesvalidator",3]],null,null,null,null,[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["validationresult",4]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0],["string",3]],["string",3]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["validationresult",4]]],"p":[[4,"ValidationResult"],[3,"SeriesValidator"],[3,"Validator"],[3,"ScatterValidator"],[3,"ValidatorWrapper"],[8,"Validate"],[13,"Err"],[13,"Ok"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};